# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   lint:
#     name: Lint
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'pnpm'

#       - name: Install pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: 8

#       - name: Install dependencies
#         run: pnpm install

#       - name: Run linting
#         run: pnpm lint

#   test:
#     name: Test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'pnpm'

#       - name: Install pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: 8

#       - name: Install dependencies
#         run: pnpm install

#       - name: Run tests
#         run: pnpm test

#       - name: Upload coverage reports
#         uses: codecov/codecov-action@v3
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }}
#           directory: ./coverage/
#           fail_ci_if_error: false

#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     needs: [lint, test]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'pnpm'

#       - name: Install pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: 8

#       - name: Install dependencies
#         run: pnpm install

#       - name: Build packages
#         run: pnpm build

#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: build-artifacts
#           path: |
#             apps/web/.next
#             apps/api/dist

#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     needs: [build]
#     if: github.ref == 'refs/heads/main'
#     environment: production
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Download build artifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: build-artifacts

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'pnpm'

#       - name: Install pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: 8

#       - name: Install dependencies
#         run: pnpm install --production

#       # Deploy API
#       - name: Deploy API to Cloud Run
#         id: deploy-api
#         uses: google-github-actions/deploy-cloudrun@v1
#         with:
#           service: ecommerce-api
#           region: us-central1
#           source: ./apps/api
#           credentials: ${{ secrets.GCP_SA_KEY }}

#       # Deploy Web
#       - name: Deploy Web to Vercel
#         uses: amondnet/vercel-action@v20
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#           working-directory: ./apps/web
#           vercel-args: '--prod'

#       - name: Update API URL in Web
#         run: |
#           API_URL=${{ steps.deploy-api.outputs.url }}
#           echo "NEXT_PUBLIC_GRAPHQL_URL=$API_URL/graphql" >> apps/web/.env.production
